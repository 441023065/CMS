@using YangKai.BlogEngine.Modules.PostModule.Objects

@{
    Layout = "~/Views/Shared/_layout-whth-sidebar.cshtml";
    var channel = ViewBag.Channel as Channel;
    var group = ViewBag.Group as Group;
}

<div id="posts">
   
    <div class="breadcrumbs">
        @if (group == null)
        {
            <strong>@channel.Name</strong>
        }
        else
        {
            <a href="/@channel.Url">@channel.Name</a>
            <strong>@group.Name</strong>
        }
    </div>

    @if (YangKai.BlogEngine.Common.WebMasterCookie.IsLogin)
    {
        <div id="addpost" class="_add"><a href="/admin/postmanage/new">添加新文章</a></div>
        <div class="clear"></div>
    }
    <div data-bind="with: listViewModel, visible: State() === 'list'">
        @Html.Partial("index-box")
        @Html.Partial("index-post")
    </div>
    <div data-bind="with: detailViewModel, visible: State() === 'detail'">
        
    </div>
</div>

<script>

    var viewModel = function (isadmin) {
        var self = this;
        self.State = ko.observable('list');
        self.listViewModel = ko.observable(new listViewModel());
        self.detailViewModel = ko.observable(new detailViewModel());

        $.sammy(function () {

            //TODO: 无法请求到该路由 /technologies#!/codes/1?t=阅读
            this.get("#!/:group/:page[\?]:query$", function () {
                var group = this.params['group'];
                var page = this.params['page'];
                var query = this.params['query'];
                alert(query);
                self.listViewModel().turnpages('', group,page,query);
            });

            this.get("#!/:group[\?]:query$", function () {
                var group = this.params['group'];
                var query = this.params['query'];
                self.listViewModel().turnpages('', group, 1, query);
            });
            
            this.get("#!/:group/:page[/]?$", function () {
                var group = this.params['group'];
                var page = this.params['page'];
                self.listViewModel().turnpages('', group, page, '');
            });

           
            this.get("#!/:group[/]?$", function () {
                var group = this.params['group'];
                var page = 1;
                if (IsNum(group)) {
                    page = group;
                    group = '';
                }
                self.listViewModel().turnpages('', group, page, '');
            });
            
            this.get("#![/]?$", function () {
                var channel = urlHelper.getChannelUrl();
                self.listViewModel().turnpages(channel, '', 1, '');
            });
            
        }).run();
    };

    var listViewModel = function (isadmin) {
        var self = this;

        self.authorized = isadmin;
        self.list = ko.observableArray();
        self.loading = ko.observable(false);

        self.TotalResults = ko.observable();
        self.Pager = ko.pager(self.TotalResults);
        
        self.Pager().CurrentPage.subscribe(function () {
            var group = urlHelper.getGroupUrl();
            group = group == '' ? '' : ("/" + group);
            var page = self.Pager().CurrentPage();
            page = page == 1 ? '' : ("/" + page);
            location.href = "#!" + group + page + urlHelper.getQuery();
        });

        self.del = function (data) {
            Messenger().run(
                { progressMessage: 'Deleting data...' },
                {
                    url: "/admin/postmanage/delete/",
                    data: "id=" + data.PostId,
                    method: "post",
                    dataType: "json",
                    complete: function (context) {
                        var o = JSON.parse(context.responseText);
                        if (o.result) {
                            message.success('“#' + data.Title + '”  be moved to trash.');
                            data.PostStatus = 'Trash';
                            itemRefresh(self.list, data);
                        } else {
                            message.error(o.reason);
                        }
                    }
                }
            );
        };

        self.expand = function (entity) {
            entity.IsShowDetail = !entity.IsShowDetail;
            itemRefresh(self.list, entity);
        };

        self.turnpages = function (channel, group, page, query) {
            self.loading(!self.loading());
            //设置当前page为url中page.
            self.Pager().CurrentPage(urlHelper.getPage());

            //定位到顶部
            scroll(0, 0);

            var link = '/article?';
            link += 'type=list&id=' + page;
            link += '&channelurl=' + channel;
            link += '&groupurl=' + group;
            link += '&id=' + page;
            link += '&'+query;
            
            $.getJSON(link, function (result) {
                //若滑动效果未结束,则延迟绑定.
                if ($("nav ul li.moving_bg").is(":animated")) {
                    setTimeout(function () { self.refreshlist(result); }, 300);
                } else {
                    self.refreshlist(result);
                }
            });
        };

        self.refreshlist = function (result) {
            self.loading(!self.loading());
            self.list(result.data);
            self.TotalResults(result.count);
            ko.utils.arrayForEach(self.list(), function (data) { data.IsShowDetail = false; });
            imglazyload("#posts img");
        };
    };

    var detailViewModel = function () {
    };
</script>

<script>
    $(function () {
        ko.applyBindings(new viewModel(), $("#posts")[0]);
    });
</script>